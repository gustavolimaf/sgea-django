# Generated by Django 4.2.7 on 2025-10-09 12:40

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telefone', models.CharField(help_text='Telefone de contato', max_length=15, validators=[django.core.validators.RegexValidator(message="Telefone deve estar no formato: '+999999999'. Até 15 dígitos.", regex='^\\+?1?\\d{9,15}$')])),
                ('instituicao', models.CharField(blank=True, help_text='Instituição de ensino (obrigatório para alunos e professores)', max_length=200, null=True)),
                ('perfil', models.CharField(choices=[('ALUNO', 'Aluno'), ('PROFESSOR', 'Professor'), ('ORGANIZADOR', 'Organizador')], default='ALUNO', help_text='Perfil do usuário no sistema', max_length=12)),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, help_text='Data e hora do cadastro')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'ordering': ['first_name', 'last_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Evento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('SEMINARIO', 'Seminário'), ('PALESTRA', 'Palestra'), ('MINICURSO', 'Minicurso'), ('SEMANA_ACADEMICA', 'Semana Acadêmica')], help_text='Tipo do evento', max_length=20)),
                ('nome', models.CharField(help_text='Nome/título do evento', max_length=200)),
                ('descricao', models.TextField(help_text='Descrição detalhada do evento')),
                ('data_inicial', models.DateField(help_text='Data de início do evento')),
                ('data_final', models.DateField(help_text='Data de término do evento')),
                ('horario_inicio', models.TimeField(help_text='Horário de início')),
                ('horario_fim', models.TimeField(help_text='Horário de término')),
                ('local', models.CharField(help_text='Local onde será realizado o evento', max_length=300)),
                ('vagas_totais', models.PositiveIntegerField(help_text='Quantidade máxima de participantes', validators=[django.core.validators.MinValueValidator(1)])),
                ('data_criacao', models.DateTimeField(auto_now_add=True, help_text='Data de criação do registro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, help_text='Data da última atualização')),
                ('ativo', models.BooleanField(default=True, help_text='Indica se o evento está ativo')),
                ('organizador', models.ForeignKey(help_text='Organizador responsável pelo evento', limit_choices_to={'perfil': 'ORGANIZADOR'}, on_delete=django.db.models.deletion.PROTECT, related_name='eventos_organizados', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Evento',
                'verbose_name_plural': 'Eventos',
                'ordering': ['-data_inicial', 'horario_inicio'],
            },
        ),
        migrations.CreateModel(
            name='Inscricao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_inscricao', models.DateTimeField(auto_now_add=True, help_text='Data e hora da inscrição')),
                ('ativa', models.BooleanField(default=True, help_text='Indica se a inscrição está ativa')),
                ('data_cancelamento', models.DateTimeField(blank=True, help_text='Data e hora do cancelamento (se aplicável)', null=True)),
                ('evento', models.ForeignKey(help_text='Evento em que o usuário está inscrito', on_delete=django.db.models.deletion.CASCADE, related_name='inscricoes', to='eventos.evento')),
                ('usuario', models.ForeignKey(help_text='Usuário inscrito', on_delete=django.db.models.deletion.CASCADE, related_name='inscricoes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Inscrição',
                'verbose_name_plural': 'Inscrições',
                'ordering': ['-data_inscricao'],
            },
        ),
        migrations.CreateModel(
            name='Certificado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo_verificacao', models.CharField(help_text='Código único para verificação do certificado', max_length=50, unique=True)),
                ('data_emissao', models.DateTimeField(auto_now_add=True, help_text='Data e hora da emissão do certificado')),
                ('arquivo_pdf', models.FileField(blank=True, help_text='Arquivo PDF do certificado', null=True, upload_to='certificados/%Y/%m/')),
                ('emitido_por', models.ForeignKey(help_text='Organizador que emitiu o certificado', on_delete=django.db.models.deletion.PROTECT, related_name='certificados_emitidos', to=settings.AUTH_USER_MODEL)),
                ('inscricao', models.OneToOneField(help_text='Inscrição vinculada ao certificado', on_delete=django.db.models.deletion.CASCADE, related_name='certificado', to='eventos.inscricao')),
            ],
            options={
                'verbose_name': 'Certificado',
                'verbose_name_plural': 'Certificados',
                'ordering': ['-data_emissao'],
            },
        ),
        migrations.AddIndex(
            model_name='inscricao',
            index=models.Index(fields=['usuario', 'ativa'], name='eventos_ins_usuario_906444_idx'),
        ),
        migrations.AddIndex(
            model_name='inscricao',
            index=models.Index(fields=['evento', 'ativa'], name='eventos_ins_evento__2058b3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='inscricao',
            unique_together={('usuario', 'evento')},
        ),
        migrations.AddIndex(
            model_name='evento',
            index=models.Index(fields=['data_inicial'], name='eventos_eve_data_in_869a33_idx'),
        ),
        migrations.AddIndex(
            model_name='evento',
            index=models.Index(fields=['tipo'], name='eventos_eve_tipo_8fdb3a_idx'),
        ),
        migrations.AddIndex(
            model_name='evento',
            index=models.Index(fields=['organizador'], name='eventos_eve_organiz_56d6db_idx'),
        ),
        migrations.AddIndex(
            model_name='certificado',
            index=models.Index(fields=['codigo_verificacao'], name='eventos_cer_codigo__3aff4f_idx'),
        ),
    ]
